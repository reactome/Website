#!/usr/local/bin/perl
use strict;
use warnings;

use CGI qw(:standard);
use CGI::Carp 'fatalsToBrowser';
use HTTP::Tiny;
use Data::Dumper;
use JSON;
use List::MoreUtils qw/any/;

use lib '../cgi-modules';
use GKB::CommonUtils;


my $host = url(-base => 1);

my $id  = param('DB_ID');
my $person_id = param('personId');


my %month = qw/
01 January
02 February
03 March
04 April
05 May
06 June
07 July
08 August
09 September
10 October
11 November
12 December
/;
print header(-type => 'text/plain');

if ($id && $person_id) {
    $id =~ s/\.\d+$//;
    my $dba = get_dba('current', 'localhost');
    my $pathway = $dba->fetch_instance_by_db_id($id)->[0];

    #print Dumper $pathway;
    my $stable_id = $pathway->stableIdentifier->[0]->displayName || 'NO STABLE ID';
    my $doi       = $pathway->doi->[0];
    my $title     = $pathway->displayName || 'NO NAME';
    my @authors_name_and_datetime   = filter_authors($pathway->authored, $person_id);
    my @reviewers_name_and_datetime = filter_authors($pathway->reviewed, $person_id);

    my $xref = "Reactome:$stable_id";
    if ($doi) {
        $xref .= ", DOI:$doi";
    }
    my $live_site_url = 'https://reactome.org';
    my $note = "Reactome Pathway Knowledgebase, $live_site_url";
    #my $url = "$live_site_url/content/detail/$stable_id";
    my $how_pub   = "\\url{$live_site_url/PathwayBrowser/\#$stable_id\}";

    my $OK;
    if (@authors_name_and_datetime && has_entries(@authors_name_and_datetime)) {
        print "Authored:\n";
        print bibtex($stable_id,$title,$xref,$how_pub,$note,$doi,@authors_name_and_datetime);
        $OK++;
    }

    if (@reviewers_name_and_datetime && has_entries(@reviewers_name_and_datetime)) {
        print "Reviewed:\n";
        print bibtex($stable_id,$title,$xref,$how_pub,$note,$doi,@reviewers_name_and_datetime);
        $OK++;
    }

    if (!$OK) {
        print "No data found for Pathway $id, Person $person_id\n";
    }
} else {
    print "DB_ID or personId parameter(s) not found\n";
}

sub filter_authors {
    my $author_instance_edits = shift;
    my $person_id = shift;

    if (!$author_instance_edits || scalar @{$author_instance_edits} == 0) {
        return;
    }

    my @selected_author_instance_edits = grep {
        any { $_->db_id == $person_id } @{$_->author}
    } @{$author_instance_edits};

    return map { [ $_->displayName =~ /^(.+), (\d+)-(\d+)-\d+/ ] } @selected_author_instance_edits;
}

# gotta love Perl...
# Checks the incoming array has entries and they are array references
# returning the count, therefore a count of zero is used a false value
# and more than zero is used as a true value
#
# Each entry should be an array reference containing the author name, year of
# entry, and month of entry
sub has_entries {
    return scalar(grep {$_ && @$_} @_);
}

sub bibtex {
    my ($stable_id,$title,$xref,$how_pub,$note,$doi,@authors) = @_;
    for my $author_entry (@authors) {
        $author_entry && @{$author_entry} || next;
        my ($author_string, $year, $mon) = @{$author_entry};
        my $month = $month{$mon};

        my $bibtex = bibtex_template();
        $bibtex    =~ s/STABLE_ID/$stable_id/gm;
        $bibtex    =~ s/TITLE/$title/gm;
        $bibtex    =~ s/XREF/$xref/gm;
        $bibtex    =~ s/HOW_PUB/$how_pub/gm;
        $bibtex    =~ s/NOTE/$note/gm;
        $bibtex    =~ s/MONTH/$month/gm;
        $bibtex    =~ s/YEAR/$year/gm;
        $bibtex    =~ s/ATSTR/$author_string/gm;
        $bibtex    =~ s/XREF/DOI:$doi/gm;

        print "$bibtex\n";
    }
}

sub bibtex_template {
'
<bibtex>
    @MISC{ STABLE_ID,
           author          = {ATSTR},
           title           = {TITLE},
           crossref        = {XREF},
           howpublished    = {HOW_PUB},
           note            = {NOTE},
           month           = {MONTH},
           year            = {YEAR},
           }
</bibtex>
';
}
