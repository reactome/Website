/* jce - 2.9.41 | 2023-08-23 | https://www.joomlacontenteditor.net | Copyright (C) 2006 - 2023 Ryan Demmer. All rights reserved | GNU/GPL Version 2 or later - http://www.gnu.org/licenses/gpl-2.0.html */
!function($, window) {
    var Joomla = window.Joomla || {};
    function ucfirst(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
    }
    function init() {
        var startSize, skip = !0, base_url = "";
        $('script[src*="media/com_jce/js/profile.min.js"]').each(function() {
            var url = this.src;
            base_url = url.substring(0, url.indexOf("media"));
        }), $("#jform_components_select input").on("change", function() {
            var state;
            this.checked && (state = parseInt($(this).val(), 10), $("#jform_components").parents(".control-group").toggle(!!state));
        }).trigger("change"), $("#profile-features :input[name], #profile-editor :input[name], #profile-plugins :input[name]").on("change", function() {
            var name;
            skip || -1 !== this.name.indexOf("jform") && (name = this.name.replace('!"#$%&()*+,./:;<=>?@[]^`{|}~', "\\$1", "g"), 
            $(this).add('[name="' + name + '"]').addClass("isdirty"));
        }).on("liszt:updated", function() {
            $(this).addClass("isdirty");
        }), $(".sortableList").sortable({
            connectWith: ".sortableList",
            axis: "y",
            update: function(event, ui) {
                setRows(), setPlugins();
            },
            start: function(event, ui) {
                $(ui.placeholder).width($(ui.item).width()).height($(ui.item).height());
            },
            placeholder: "sortable-row-highlight",
            opacity: .8
        }), $(".mce-btn-group:last-child").after('<div class="mce-container mce-flow-layout-item mce-btn-group" />'), 
        $(".sortableListItem").sortable({
            items: ".mce-btn",
            connectWith: ".sortableListItem",
            placeholder: "sortable-btn-highlight mce-widget mce-btn",
            cancel: "",
            update: function(event, ui) {
                var options;
                setRows(), setPlugins(), $(".editor-layout .mce-btn-group").filter(function() {
                    return 0 === $(this).children("div").length;
                }).remove().addBack(":last-child").after('<div class="mce-container mce-flow-layout-item mce-btn-group" />'), 
                options = $(".mce-btn-group").sortable("option"), $(".editor-layout .mce-btn-group.ui-sortable").sortable("destroy"), 
                $(".editor-layout .mce-btn-group").sortable(options);
            },
            start: function(event, ui) {
                $(ui.item).parents(".mce-toolbar-grp").addClass("ui-sortable-sorting"), 
                $(ui.placeholder).width($(ui.item).width()).height($(ui.item).height()), 
                $(".mce-btn-group:empty").addClass("visible");
            },
            stop: function(event, ui) {
                $(ui.item).parents(".mce-toolbar-grp").removeClass("ui-sortable-sorting");
            },
            opacity: .8
        }), $(".mce-resizehandle").dragHelper().on("drag:start", function(e) {
            startSize = {
                width: $(".editor-layout .mce-tinymce").width(),
                height: $(".mce-edit-area").height()
            };
        }).on("drag:drag", function(o, e) {
            var width = startSize.width + e.deltaX, e = startSize.height + e.deltaY;
            null !== width && (width = Math.max(100, width), width = Math.min(65535, width), 
            $(".editor-layout .mce-tinymce, .widthMarker").width(width), $("#jform_config_editor_width").val(width), 
            $(".widthMarker span").html(width + "px")), null !== e && (e = Math.max(100, e), 
            e = Math.min(65535, e), $(".editor-layout .mce-edit-area").height(e), 
            $("#jform_config_editor_height").val(e));
        }), $("#jform_config_editor_width").change(function() {
            var v = $(this).val() || "100%", s = v + "px";
            /%/.test(v) ? (s = v, v = 100) : s = (v = parseInt(v, 10)) + "px", $(".widthMarker span").html(s), 
            $(".widthMarker, .mce-tinymce").width(s);
        }), $("#jform_config_editor_width").change(function() {
            var v = $(this).val() || "auto";
            /%/.test(v) || "number" === $.type(v) && parseInt(v, 10);
        }), $("#jform_config_editor_toolbar_theme").change(function() {
            var value = -1 !== (value = this.value).indexOf(".") ? value.replace(/([^\.]+)\.([\w]+)/, function(match, skin, variant) {
                return (skin = "mce" + ucfirst(skin)) + "Skin " + skin + "Skin" + ucfirst(variant);
            }) : "mce" + ucfirst(value) + "Skin";
            $(".editor-layout .mceEditor, .editor-button-pool .mceEditor").attr("class", function(i, value) {
                return $.trim(value.replace(/mce([a-z0-9]+)Skin([a-z0-9]*)/gi, ""));
            }).addClass("mceDefaultSkin " + value), $(".mceDefaultSkin", "#profile-plugins").attr("class", function(i, value) {
                return $.trim(value.replace(/mce([a-z0-9]+)Skin([a-z0-9]*)/gi, ""));
            }).addClass("mceDefaultSkin " + value), $("#mce-theme").remove(), "default" !== this.value && (value = this.value.replace(/\.\w+/, ""), 
            $('<link href="' + base_url + "components/com_jce/editor/tiny_mce/themes/advanced/skins/" + value + '/ui.admin.css" rel="stylesheet" id="mce-theme" />').appendTo("head"));
        }).change(), $("#jform_config_editor_path :input[name]:checked").change(function() {
            $(".editor-layout .mce-tinymce .mce-statusbar .mce-path").toggle(1 == $(this).val());
        }).change(), $(".editor-features input:checkbox").click(function() {
            setPlugins();
        }), $("#paramseditorresizing").change(function() {
            var v = $(this).val();
            $(".editor-layout .mce-tinymce .mce-statusbar .mce-resizehandle").toggle(1 == v);
        }).change(), $("#jform_config_editor_toggle").change(function() {
            var v = $(this).val();
            $("#editor_toggle").toggle(1 === v);
        }).change(), $("#editor_toggle").prop("hidden", 0 == $("#jform_config_editor_toggle").length), 
        $("#jform_config_editor_toggle_label").on("change keyup", function() {
            this.value && $("#editor_toggle").text(this.value);
        }), $('input[type="number"]').change(function() {
            this.value < 1 && (this.value = "");
        }), $("input[data-decode]").val(function(index, value) {
            var reverseEntities;
            return value && (reverseEntities = {
                "&lt;": "<",
                "&gt;": ">",
                "&amp;": "&",
                "&quot;": '"',
                "&apos;": "'"
            }, value = value.replace(/&(#)?([\w]+);/g, function(all, numeric, value) {
                return numeric ? String.fromCharCode(value) : reverseEntities[all];
            })), value;
        }), skip = !1, $(".nav-tabs li", ".tab-content").on("click", function(e) {
            e.preventDefault();
            var e = $(this).index(), $container = $(this).parent().parent(".tabbable");
            $(this).parent().children(".active").removeClass("active show hide"), 
            $(this).addClass("active show"), $(".tab-content .tab-pane", $container).removeClass("active show hide").eq(e).addClass("active show");
        }), $(".checkboxes.sortable").sortable({
            axis: "y",
            placeholder: "sortable-placeholder",
            start: function(event, ui) {
                $(ui.placeholder).height($(ui.item).height()).width($(ui.item).width());
            },
            update: function(event, ui) {
                $("input", ui.item).trigger("change");
            }
        }), $(".ui-jce").removeClass("loading");
    }
    function setRows() {
        var v = $.map($(".editor-layout .mce-toolbar").has(".mce-btn"), function(toolbar) {
            return $.map($(".mce-btn", toolbar), function(button) {
                return $(button).data("name");
            }).join(",");
        }).join(";");
        $('input[name="jform\\[rows\\]"]').val(v).change();
    }
    function setPlugins() {
        var plugins = [];
        $(".ui-sortable > .mce-btn", ".editor-layout").each(function() {
            plugins.push($(this).data("name"));
        }), $(".editor-features input:checkbox:checked").each(function() {
            plugins.push($(this).val());
        }), $('input[name="jform\\[plugins\\]"]').val(plugins.join(",")).change(), 
        function(plugins) {
            var $tabs = $("#profile-plugins-tabs > .nav-item");
            $tabs.removeClass("hide active").each(function(i) {
                var name = $(this).children("[href]").attr("href").replace("#profile-plugins-", ""), s = -1 != $.inArray(name, plugins);
                $("#profile-plugins-" + name).removeClass("show active").find("input[name], select[name]").prop("disabled", !s), 
                s || $(this).addClass("hide");
            }), $tabs.not(".hide").first().addClass("active").trigger("click");
        }(plugins);
    }
    Joomla.submitbutton = function(task) {
        var form = document.getElementById("adminForm");
        ("profile.cancel" == (form.task.value = task) ? $(".tab-pane :input[name]") : $("#profile-features :input[name], #profile-editor :input[name], #profile-plugins :input[name]").not(".isdirty")).prop("disabled", !0);
        try {
            Joomla.submitform(task, form);
        } catch (e) {}
    }, $.fn.dragHelper = function(options) {
        var downButton, overlay, startX, startY, element = this, start = function(e) {
            var dw = $(document).width(), dh = $(document).height();
            e.preventDefault(), downButton = e.button, startX = e.screenX, startY = e.screenY, 
            overlay = $("<div />").css({
                position: "absolute",
                top: 0,
                left: 0,
                width: dw,
                height: dh,
                zIndex: 2147483647,
                opacity: 1e-4
            }).appendTo("body"), $(document).on("mousemove.drag", function(e) {
                drag(e);
            }), $(document).on("mouseup.drag", function(e) {
                stop(e);
            }), $(element).trigger("drag:start", e);
        }, drag = function(e) {
            if (e.button !== downButton) return stop(e);
            e.deltaX = e.screenX - startX, e.deltaY = e.screenY - startY, e.preventDefault(), 
            $(element).trigger("drag:drag", e);
        }, stop = function(e) {
            $(document).off("mousemove.drag mouseup.drag"), $(overlay).remove(), 
            $(element).trigger("drag:stop", e);
        };
        return this.destroy = function() {
            $(element).off();
        }, $(element).on("mousedown.drag", function(e) {
            start(e);
        }), this;
    }, $(document).ready(function() {
        $("select[data-toggle]").on("change", function() {
            var key = $(this).attr("data-toggle"), value = $(this).val(), $parent = $(this).parents(".control-group").siblings(".filesystem-options"), key = ($('[data-toggle-target^="' + key + '"]', $parent).hide().find(":input").prop("disabled", !0), 
            $('[data-toggle-target="' + key + "-" + value + '"]', $parent));
            key.show().find(":input").prop("disabled", !1), $.fn.chosen && key.find("select").chosen("destroy").chosen();
        }), $("select[data-toggle]").trigger("change");
    }), $(window).on("load", function() {
        $(".com_jce_select_custom").each(function() {
            var elm = this, selector = "#" + $(this).attr("id") + "_chzn";
            function tagHandler(event, element) {
                var customOptionValue, customOption, highlighted = $(selector).find("li.active-result.highlighted").first();
                13 === event.which && "" !== highlighted.text() ? (customOptionValue = highlighted.text(), 
                $(selector).find("option").filter(function() {
                    return $(element).val() == customOptionValue;
                }).remove(), customOption = $(selector).find("option").filter(function() {
                    return $(element).html() == highlighted.text();
                }).attr("selected", "selected")) : "" !== (customOption = $(elm).find("option").filter(function() {
                    return $(element).html() == customOption;
                })).text() ? customOption.attr("selected", "selected") : ((event = $("<option>")).text(element.value).val(element.value), 
                event.attr("selected", "selected"), $(elm).append(event)), element.value = "", 
                $(elm).trigger("liszt:updated");
            }
            $(selector).find("input").on("keypress", function(event) {
                44 === event.charCode && (this.value && 3 <= this.value.length && tagHandler(event, this), 
                event.preventDefault());
            }), $(selector).find("input").on("keyup", function(event) {
                13 === event.which && (this.value && 3 <= this.value.length && tagHandler(event, this), 
                event.preventDefault());
            });
        });
    }), $(document).ready(function() {
        window.setTimeout(function() {
            init();
        }, 100);
    });
}(jQuery, window), function($) {
    window.WfSelectUsers = function() {
        var name = $("#jform_users").val() || $("#jform_users").attr("value"), id = $("#jform_users_id").val(), opt = new Option(name, id), value = ($("#jform_users, #jform_users_id").val("").attr("value", ""), 
        $("#jform_users_select").val());
        (value = Array.isArray(value) ? value : [ value ]).push(id), 0 === $("#jform_users_select").find('option[value="' + id + '"]').length && $("#jform_users_select").append(opt), 
        $("#jform_users_select").val(value).trigger("chosen:updated").trigger("liszt:updated.chosen"), 
        $("#jform_users_select").parents("joomla-field-fancy-select").each(function() {
            this.choicesInstance && this.choicesInstance.setValue([ {
                value: id,
                label: name
            } ]);
        });
    };
}(jQuery), function($) {
    $(document).ready(function() {
        $(".filetype").each(function() {
            var self = this, $input = $('input[type="hidden"]', this);
            function serialize() {
                var list = [], v = ($(self).parent().find(".filetype-list").each(function() {
                    var v1 = $(this).find('.filetype-item input[type="checkbox"]').map(function() {
                        return this.checked ? this.value : "-" + this.value;
                    }).get(), v2 = $(this).find(".filetype-custom input").map(function() {
                        if ("" !== this.value) return this.value;
                    }).get(), group = "", v1 = ($(this).find('.filetype-group input[type="checkbox"]').map(function() {
                        group = $(this).parents(".filetype-group").data("filetype-group"), 
                        this.checked || (group = "-" + group);
                    }), $.merge(v1, v2).join(","));
                    list.push(group ? group + "=" + v1 : v1);
                }), list.join(";"));
                $input.val(v).addClass("isdirty"), $(self).val(v);
            }
            $('input[type="checkbox"]', this).on("click", function() {
                serialize();
            }), $(".filetype-edit", this).on("click", function(e) {
                e.preventDefault(), $(".filetype-list", self).slideToggle();
            }), $(this).on("change", ".filetype-custom input", function(e) {
                e.preventDefault(), $(this).siblings(".file").attr("class", "").addClass("file").addClass(this.value), 
                serialize();
            }), $(this).on("click", ".filetype-custom .filetype-clear", function(e) {
                e.preventDefault(), $(this).siblings("input").val("");
            }), $(".filetype-add", this).on("click", function(e) {
                e.preventDefault();
                var e = $(this).parents(".filetype-item"), clone = e.clone();
                $(clone).find("input").val(""), $(clone).insertAfter(e);
            }), $(this).on("click", ".filetype-remove", function(e) {
                e.preventDefault(), $(this).parents(".filetype-item").remove(), 
                serialize();
            }), $(".filetype-group", this).length && $(".filetype-list", this).sortable({
                axis: "y",
                items: "> .filetype-item",
                connectWith: ".filetype .filetype-list",
                update: function(event, ui) {
                    serialize();
                }
            });
        });
    });
}(jQuery), function($) {
    var previewStyles = [ "fontFamily", "fontSize", "fontWeight", "textDecoration", "textTransform", "color", "backgroundColor" ];
    $(document).ready(function() {
        var init = !0;
        $(".styleformat-item-trash", ".styleformat-list").on("click", function(e) {
            e.preventDefault(), 1 === $("div.styleformat-list div.styleformat").length ? ($(this).parents(".styleformat").find("input, select").val("").removeAttr("style"), 
            $(this).parents(".styleformat").hide()) : $(this).parents(".styleformat").remove(), 
            $(".styleformat-list").trigger("update"), e.preventDefault();
        }), $(".styleformat-item-plus", ".styleformat-list").on("click", function(e) {
            e.preventDefault();
            var $item = $(this).prev(), $item = ($.fn.chosen && $("select", $item).chosen("destroy"), 
            $item.clone(!0).insertBefore(this).show());
            $("div", $item).removeClass("hide"), $("a.close.collapse", $item).removeClass("icon-chevron-down").addClass("icon-chevron-up"), 
            $("input, select", $item).val("").removeAttr("style").first().focus(), 
            e.preventDefault();
        }), $(".styleformat-list").sortable({
            axis: "y",
            update: function(event, ui) {
                $("div.styleformat-list").trigger("update");
            },
            handle: ".styleformat-item-handle",
            items: ".styleformat",
            placeholder: "styleformat-highlight",
            start: function(event, ui) {
                $(ui.placeholder).height($(ui.item).height());
            }
        }).on("update", function() {
            var list = [], v = "";
            $(".styleformat", this).each(function() {
                var data = {}, x = 0;
                $(".styleformat-item-title input", this).val() && $('input[type="text"], select', this).each(function() {
                    var key = $(this).parents("[data-key]").data("key"), val = $(this).val();
                    "" != val && ("element" != key && "classes" != key && "styles" != key && "attributes" != key || x++, 
                    data[key] = val);
                }), 0 < x && !$.isEmptyObject(data) && list.push(data);
            }), list.length && (v = JSON.stringify(list)), init || $('input[type="hidden"]', this).first().val(v).trigger("change");
        }), $(".styleformat").each(function() {
            $('input[type="text"], select', this).on("change", function() {
                $("div.styleformat-list").trigger("update");
                var n, title = $("div.styleformat-item-title input", $(this).parents("div.styleformat")), key = $(this).parents("[data-key]").data("key"), val = $(this).val();
                "element" == key && ($(title).attr("class", function(i, cls) {
                    return cls ? $.trim(cls.replace(/stc_[a-z0-9]+/g, "").replace(/\s+/g, " ")) : "";
                }), /^(h[1-6]|em|strong|code|sub|sup)$/.test(val)) && $(title).addClass("stc_" + val), 
                "styles" == key && ($(title).attr("style", ""), n = title, 0 != /\s*([^:]+):\s*([^;]+);?/.test(key = val)) && $.each(key.split(";"), function(i, s) {
                    var k, s = $.trim(s).split(":");
                    1 < s.length && (k = $.trim(s[0]), s = $.trim(s[1]), -1 !== $.inArray(k.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function(all, letter) {
                        return letter.toUpperCase();
                    }), previewStyles)) && $(n).css(k, s);
                });
            }).trigger("change"), $(".collapse", this).on("click.collapse", function(e) {
                e.preventDefault(), $(this).parents(".styleformat").toggleClass("styleformat-collapse");
            });
        }), 1 < $(".styleformat", ".styleformat-list").length && $(".styleformat", ".styleformat-list").addClass("styleformat-collapse"), 
        init && $(document).ready(function() {
            $.fn.chosen && $(".styleformat select").chosen("destroy");
        }), init = !1, 1 < $('input[type="hidden"]', ".styleformat-list").length && $(".styleformat-list").trigger("update");
    });
}(jQuery), function($) {
    $(document).ready(function() {
        $(".fontlist").each(function() {
            var el = this;
            $('input[type="checkbox"]', this).on("click", function() {
                $(".fontlist").trigger("update");
            }), $('input[type="text"]', this).on("change", function() {
                $(".fontlist").trigger("update");
            }), $(".font-item-trash", this).on("click", function(e) {
                e.preventDefault(), $(this).parents(".font-item").remove(), $(".fontlist").trigger("update");
            }), $(".font-item-plus", this).on("click", function(e) {
                e.preventDefault(), $(".font-item[hidden]", el).clone(!0).insertBefore(this).removeAttr("hidden").find("input").val("").first().focus();
            });
        }).on("update", function() {
            var data = [], v = "";
            $(".font-item", this).not(".hide").each(function() {
                var obj = {}, key = $("input:text", this).first().val(), val = $("input:text", this).last().val(), key = (key && val && (obj[key] = val), 
                $("input:checkbox:checked", this).val());
                key && 2 === (val = key.split("=")).length && (obj[val[0]] = val[1]), 
                $.isEmptyObject(obj) || data.push(obj);
            }), data.length && (v = JSON.stringify(data)), $('input[type="hidden"]', this).val(v).trigger("change");
        }).sortable({
            axis: "y",
            items: ".font-item",
            update: function(event, ui) {
                $(".fontlist").trigger("update");
            },
            placeholder: "font-item-highlight sortable-placeholder",
            start: function(event, ui) {
                $(ui.placeholder).height($(ui.item).height()).width($(ui.item).width());
            }
        });
    });
}(jQuery), function($) {
    $(document).ready(function() {
        $(".blockformats").each(function() {
            var el = this;
            $('input[type="checkbox"]', this).on("click", function() {
                $(el).trigger("update");
            });
        }).on("update", function() {
            $(":input[name]", this).trigger("change");
        }).sortable({
            axis: "y",
            update: function(event, ui) {
                $(".blockformats").trigger("update");
            },
            placeholder: "blockformat-item-highlight sortable-placeholder",
            start: function(event, ui) {
                $(ui.placeholder).height($(ui.item).height()).width($(ui.item).width());
            }
        });
    });
}(jQuery);